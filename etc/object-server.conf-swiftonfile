[DEFAULT]
#
# Default swiftonfile mount point to be used for object server
# This mount point is the parent directory to the device specified
# in this swiftonfile object ring.
devices = /mnt/swiftonfile
#
# You must always have the volume properly mounted *before* starting the
# SwiftOnFile object-server.
mount_check = false
bind_port = 6050
#
# Maximum number of clients one worker can process simultaneously (it will
# actually accept N + 1). Setting this to one (1) will only handle one request
# at a time, without accepting another request concurrently. By increasing the
# number of workers to a much higher value, one can prevent slow file system
# operations for one request from starving other requests.
max_clients = 1024
#
# If not doing the above, setting this value initially to match the number of
# CPUs is a good starting point for determining the right value.
workers = 1
# You can set disable_fallocate to true to turn off usage of fallocate()
# sys call to reserve space during a PUT operation.
# disable_fallocate = false
#
# You can set fallocate_reserve to the number of bytes you'd like fallocate to
# reserve, whether there is space for the given file size or not.
# fallocate_reserve = 0

[pipeline:main]
pipeline = object-server

[app:object-server]
use = egg:swiftonhpss#object
user = <your-user-name>
log_facility = LOG_LOCAL2
log_level = WARN
# For performance, after ensuring things are running in a stable manner, you
# can turn off normal request logging for the object server to reduce the
# per-request overhead and unclutter the log files. Warnings and errors will
# still be logged.
log_requests = off
#
# Adjust this value to match the stripe width of the underlying storage array
# (not the stripe element size). This will provide a reasonable starting point
# for tuning this value.
disk_chunk_size = 65536
#
# Adjust this value match whatever is set for the disk_chunk_size initially.
# This will provide a reasonable starting point for tuning this value.
network_chunk_size = 65536

# In older versions of swiftonfile, metadata stored as xattrs of files
# were serialized using PICKLE format. The PICKLE format is vulnerable to
# exploits in deployments where a user has access to backend filesystem.
# Deserializing pickled metadata can result in malicious code being
# executed if an attacker has stored malicious code as xattr from filesystem
# interface. Although, new metadata is always serialized using JSON format,
# existing metadata already stored in PICKLE format can be loaded by setting
# the following option to 'on'.
# You can turn this option to 'off' once you have migrated all your metadata
# from PICKLE format to JSON format using swiftonfile-migrate-metadata tool.
# This conf option will be deprecated and eventualy removed in future releases
# read_pickled_metadata = off

# Allow SwiftOnHPSS to purge lock files
allow_purgelock = true

# HPSS class of service ID to use
default_cos_id = 1

# Username of Swift service user in HPSS
hpss_user = swift

# Auth mechanism to use
hpss_auth_mechanism = unix

# Auth credential type to use
hpss_auth_credential_type = keytab

# Auth credential (for keytab, location of keytab file on local disk)
hpss_auth_credential = "/var/hpss/etc/hpss.unix.keytab"

# HPSS user id to write files as (setuid)
hpss_uid = 300

# HPSS group id to write files as (setgid)
hpss_gid = 300

[object-updater]
user = <your-user-name>
